# -*- coding: utf-8 -*-
"""Copy of decision tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DGw3Ceb7wxgi5FTWI_O1gWbCjx3LNBbp
"""

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier, export_graphviz
import pydotplus
from IPython.display import Image
import graphviz
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the dataset
df = pd.read_csv('preprocessed data.csv')

# Split the data into features and target variable
X = df.drop(columns='Outcome')
y = df['Outcome']

# Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize the Decision Tree classifier
decision_tree = DecisionTreeClassifier(random_state=42)

# Define a parameter grid for hyperparameter tuning
param_grid = {
    'criterion': ['gini', 'entropy'],             # Split criterion
    'max_depth': [None, 5, 10, 20],               # Maximum depth of the tree
    'min_samples_split': [2, 5, 10],              # Minimum number of samples required to split a node
    'min_samples_leaf': [1, 2, 4],                # Minimum number of samples required at a leaf node
    'max_features': [None, 'sqrt', 'log2']        # Number of features to consider for best split
}

# Perform GridSearchCV to find the best parameters
grid_search = GridSearchCV(estimator=decision_tree, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2)
grid_search.fit(X_train, y_train)

# Best parameters from GridSearchCV
best_params = grid_search.best_params_
print(f'Best Parameters: {best_params}')

# Fit the Decision Tree model with the best parameters
best_tree = grid_search.best_estimator_

# Make predictions on the test data
y_pred = best_tree.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Display the classification report
print('Classification Report:')
print(classification_report(y_test, y_pred))

# Display the confusion matrix
print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred))

# Export the optimized decision tree as a DOT file
dot_data = export_graphviz(
    best_tree,
    out_file=None,
    feature_names=X.columns,
    class_names=['No Diabetes', 'Diabetes'],
    filled=True, rounded=True, special_characters=True
)

# Use pydotplus to create a graph from the DOT data
graph = pydotplus.graph_from_dot_data(dot_data)

# Display the decision tree
Image(graph.create_png())

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler

# Load your preprocessed data
preprocessed_data = pd.read_csv('preprocessed data.csv')  # Adjust the filename if needed

# Assuming the last column is the target variable (e.g., diabetes outcome)
X = preprocessed_data.iloc[:, :-1]  # Features
y = preprocessed_data.iloc[:, -1]   # Target variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling (important for KNN)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize the KNN classifier
knn = KNeighborsClassifier()

# Define a parameter grid for hyperparameter tuning
param_grid = {
    'n_neighbors': [3, 5, 7, 9, 11],  # Number of neighbors to consider
    'weights': ['uniform', 'distance'],  # Weight function used in prediction
    'metric': ['euclidean', 'manhattan', 'minkowski']  # Distance metric
}

# Perform GridSearchCV to find the best parameters
grid_search = GridSearchCV(estimator=knn, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2)
grid_search.fit(X_train_scaled, y_train)

# Best parameters from GridSearchCV
best_params = grid_search.best_params_
print(f'Best Parameters: {best_params}')

# Fit the KNN model with the best parameters
best_knn = grid_search.best_estimator_

# Make predictions on the test data
y_pred = best_knn.predict(X_test_scaled)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Display the classification report
print('Classification Report:')
print(classification_report(y_test, y_pred))

# Display the confusion matrix
print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred))

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load your preprocessed data
preprocessed_data = pd.read_csv('preprocessed data.csv')  # Adjust the filename if needed

# Assuming the last column is the target variable (e.g., diabetes outcome)
X = preprocessed_data.iloc[:, :-1]  # Features
y = preprocessed_data.iloc[:, -1]   # Target variable

# Split the dataset into training and testing sets without stratify
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Logistic Regression model
log_reg = LogisticRegression(max_iter=1000)

# Fit the model on the training data
log_reg.fit(X_train, y_train)

# Make predictions on the test data
y_pred = log_reg.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Display the classification report
print('Classification Report:')
print(classification_report(y_test, y_pred))

# Display the confusion matrix
print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred))

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler

# Load your preprocessed data
preprocessed_data = pd.read_csv('preprocessed data.csv')  # Adjust the filename if needed

# Assuming the last column is the target variable (e.g., diabetes outcome)
X = preprocessed_data.iloc[:, :-1]  # Features
y = preprocessed_data.iloc[:, -1]   # Target variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize the Random Forest classifier
rf = RandomForestClassifier(random_state=42)

# Define a parameter grid for hyperparameter tuning
param_grid = {
    'n_estimators': [100, 200, 300],           # Number of trees
    'max_depth': [None, 10, 20, 30],           # Maximum depth of the tree
    'min_samples_split': [2, 5, 10],           # Minimum number of samples required to split a node
    'min_samples_leaf': [1, 2, 4],             # Minimum number of samples required at a leaf node
    'bootstrap': [True, False]                 # Whether bootstrap samples are used when building trees
}

# Perform GridSearchCV to find the best parameters
grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, cv=5, n_jobs=-1, verbose=2)
grid_search.fit(X_train_scaled, y_train)

# Best parameters from GridSearchCV
best_params = grid_search.best_params_
print(f'Best Parameters: {best_params}')

# Fit the Random Forest model with the best parameters
best_rf = grid_search.best_estimator_

# Make predictions on the test data
y_pred = best_rf.predict(X_test_scaled)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Display the classification report
print('Classification Report:')
print(classification_report(y_test, y_pred))

# Display the confusion matrix
print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred))

# Feature importance
importances = best_rf.feature_importances_
print("Feature Importances:")
for i, v in enumerate(importances):
    print(f'Feature {i}: {v:.4f}')

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
from scipy.stats import randint

# Load your preprocessed data
preprocessed_data = pd.read_csv('preprocessed data.csv')  # Adjust the filename if needed

# Assuming the last column is the target variable (e.g., diabetes outcome)
X = preprocessed_data.iloc[:, :-1]  # Features
y = preprocessed_data.iloc[:, -1]   # Target variable

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize the Random Forest classifier
rf = RandomForestClassifier(random_state=42)

# Define a parameter distribution for RandomizedSearchCV
param_dist = {
    'n_estimators': randint(100, 300),          # Number of trees (randomly sampled between 100 and 300)
    'max_depth': randint(10, 30),               # Maximum depth of the tree
    'min_samples_split': randint(2, 10),        # Minimum number of samples required to split a node
    'min_samples_leaf': randint(1, 4),          # Minimum number of samples required at a leaf node
    'bootstrap': [True, False]                  # Whether bootstrap samples are used when building trees
}

# Perform RandomizedSearchCV to find the best parameters
random_search = RandomizedSearchCV(estimator=rf, param_distributions=param_dist, n_iter=20, cv=3, random_state=42, n_jobs=-1, verbose=2)
random_search.fit(X_train_scaled, y_train)

# Best parameters from RandomizedSearchCV
best_params = random_search.best_params_
print(f'Best Parameters: {best_params}')

# Fit the Random Forest model with the best parameters
best_rf = random_search.best_estimator_

# Make predictions on the test data
y_pred = best_rf.predict(X_test_scaled)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Display the classification report
print('Classification Report:')
print(classification_report(y_test, y_pred))

# Display the confusion matrix
print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred))

# Feature importance
importances = best_rf.feature_importances_
print("Feature Importances:")
for i, v in enumerate(importances):
    print(f'Feature {i}: {v:.4f}')